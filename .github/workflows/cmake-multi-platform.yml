name: CMake build on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: [native, windows]
        build_type: [Release]
        include:
          - target: native
            c_compiler: gcc
            cpp_compiler: g++
          - target: windows
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++

    # Define the runner based on the platform
    runs-on: ${{ matrix.target == 'native' && 'ubuntu-latest' || 'windows-latest' }}

    steps:
    - uses: actions/checkout@v4

    # Install dependencies for native build on Ubuntu
    - name: Install dependencies (Ubuntu - Native)
      if: matrix.target == 'native'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake make \
          libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev \
          libopenal-dev libsdl2-dev libvorbis-dev libogg-dev \
          libpng-dev libjpeg-dev zlib1g-dev

    # Install dependencies for Windows build
    - name: Install dependencies (Windows)
      if: matrix.target == 'windows'
      run: |
        choco install mingw cmake -y
        choco install openal -y
        # Manually download and extract SDL2 and other precompiled libraries
        mkdir $env:GITHUB_WORKSPACE/external
        Invoke-WebRequest https://www.libsdl.org/release/SDL2-devel-2.0.12-mingw.zip -OutFile SDL2.zip
        Expand-Archive SDL2.zip -DestinationPath $env:GITHUB_WORKSPACE/external/sdl2
        Invoke-WebRequest https://downloads.xiph.org/releases/ogg/libogg-1.3.5.zip -OutFile ogg.zip
        Expand-Archive ogg.zip -DestinationPath $env:GITHUB_WORKSPACE/external/ogg
        Invoke-WebRequest https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.zip -OutFile vorbis.zip
        Expand-Archive vorbis.zip -DestinationPath $env:GITHUB_WORKSPACE/external/vorbis
        Invoke-WebRequest https://sourceforge.net/projects/gnuwin32/files/libpng/1.2.37/libpng-1.2.37-bin.zip/download -OutFile png.zip
        Expand-Archive png.zip -DestinationPath $env:GITHUB_WORKSPACE/external/png
        Invoke-WebRequest https://sourceforge.net/projects/gnuwin32/files/jpeg/6b-4/jpeg-6b-4-bin.zip/download -OutFile jpeg.zip
        Expand-Archive jpeg.zip -DestinationPath $env:GITHUB_WORKSPACE/external/jpeg
        Invoke-WebRequest https://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-bin.zip/download -OutFile zlib.zip
        Expand-Archive zlib.zip -DestinationPath $env:GITHUB_WORKSPACE/external/zlib

    # Configure CMake for native build
    - name: Configure CMake (Ubuntu - Native)
      if: matrix.target == 'native'
      run: |
        cmake -B ${{ github.workspace }}/build \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DINCLUDE_DIRECTORIES=${{ github.workspace }}/external \
          -S ${{ github.workspace }}

    # Configure CMake for Windows build
    - name: Configure CMake (Windows)
      if: matrix.target == 'windows'
      run: |
        cmake -B ${{ github.workspace }}/build \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DOPENAL_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/openal/include \
          -DOPENAL_LIBRARY=$env:GITHUB_WORKSPACE/external/openal/lib/OpenAL32.lib \
          -DSDL2_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/sdl2/include \
          -DSDL2_LIBRARY=$env:GITHUB_WORKSPACE/external/sdl2/lib/SDL2.lib \
          -DZLIB_LIBRARY=$env:GITHUB_WORKSPACE/external/zlib/lib/zlib.lib \
          -DZLIB_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/zlib/include \
          -DPNG_LIBRARY=$env:GITHUB_WORKSPACE/external/png/lib/libpng.lib \
          -DPNG_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/png/include \
          -DJPEG_LIBRARY=$env:GITHUB_WORKSPACE/external/jpeg/lib/jpeg.lib \
          -DJPEG_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/jpeg/include \
          -DVORBIS_LIBRARY=$env:GITHUB_WORKSPACE/external/vorbis/lib/libvorbis.a \
          -DVORBIS_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/vorbis/include \
          -DOGG_LIBRARY=$env:GITHUB_WORKSPACE/external/ogg/lib/libogg.a \
          -DOGG_INCLUDE_DIR=$env:GITHUB_WORKSPACE/external/ogg/include \
          -S ${{ github.workspace }}

    # Build for all targets
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    # Test
    - name: Test
      run: |
        ctest --output-on-failure --test-dir ${{ github.workspace }}/build
