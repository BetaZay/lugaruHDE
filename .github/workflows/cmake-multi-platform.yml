name: CMake build on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: [native, windows]
        build_type: [Release]
        include:
          - target: native
            c_compiler: gcc
            cpp_compiler: g++
          - target: windows
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++

    runs-on: ${{ matrix.target == 'native' && 'ubuntu-latest' || 'windows-latest' }}

    env:
      SDL_VERSION: 2.30.7

    steps:
    - uses: actions/checkout@v4

    # Install dependencies for native build on Ubuntu
    - name: Install dependencies (Ubuntu - Native)
      if: matrix.target == 'native'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake make \
          libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev \
          libopenal-dev libsdl2-dev libvorbis-dev libogg-dev \
          libpng-dev libjpeg-dev zlib1g-dev

    # Install MSYS2 using Chocolatey and configure environment on Windows
    - name: Install MSYS2 and tools using Chocolatey (Windows)
      if: matrix.target == 'windows'
      run: |
        choco install msys2 -y

        # Ensure MSYS2 is updated and install CMake and necessary libraries
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Sy --noconfirm"
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-openal mingw-w64-x86_64-SDL2 mingw-w64-x86_64-libogg mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libpng mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-zlib"

        # Add CMake to the PATH
        echo 'export PATH="/mingw64/bin:$PATH"' >> C:\tools\msys64\home\runner\.bashrc
        C:\tools\msys64\usr\bin\bash.exe -lc "source ~/.bashrc"

    # Configure CMake for native build
    - name: Configure CMake (Ubuntu - Native)
      if: matrix.target == 'native'
      run: |
        cmake -B ${{ github.workspace }}/build \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DINCLUDE_DIRECTORIES=${{ github.workspace }}/external \
          -S ${{ github.workspace }}

    # Configure CMake for Windows build
    - name: Configure CMake (Windows)
      if: matrix.target == 'windows'
      run: |
        C:\tools\msys64\usr\bin\bash.exe -lc "cmake -B ${{ github.workspace }}/build \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DOPENAL_INCLUDE_DIR=/mingw64/include \
          -DOPENAL_LIBRARY=/mingw64/lib/libopenal.a \
          -DSDL2_INCLUDE_DIR=/mingw64/include/SDL2 \
          -DSDL2_LIBRARY=/mingw64/lib/libSDL2.a \
          -DZLIB_LIBRARY=/mingw64/lib/libz.a \
          -DZLIB_INCLUDE_DIR=/mingw64/include \
          -DPNG_LIBRARY=/mingw64/lib/libpng.a \
          -DPNG_INCLUDE_DIR=/mingw64/include \
          -DJPEG_LIBRARY=/mingw64/lib/libjpeg.a \
          -DJPEG_INCLUDE_DIR=/mingw64/include \
          -DVORBIS_LIBRARY=/mingw64/lib/libvorbis.a \
          -DVORBIS_INCLUDE_DIR=/mingw64/include \
          -DOGG_LIBRARY=/mingw64/lib/libogg.a \
          -DOGG_INCLUDE_DIR=/mingw64/include \
          -DINCLUDE_DIRECTORIES=${{ github.workspace }}/external \
          -S ${{ github.workspace }}"

    # Build for all targets
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    # Test
    - name: Test
      run: |
        ctest --output-on-failure --test-dir ${{ github.workspace }}/build
