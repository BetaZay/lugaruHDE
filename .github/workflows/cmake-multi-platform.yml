name: CMake build on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [native, windows]
        build_type: [Release]
        include:
          - target: native
            c_compiler: gcc
            cpp_compiler: g++
          - target: windows
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++

    steps:
    - uses: actions/checkout@v4

    # Install dependencies on Ubuntu for native build
    - name: Install dependencies (Ubuntu - Native)
      if: matrix.target == 'native'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake make \
          libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev \
          libopenal-dev libsdl2-dev libvorbis-dev libogg-dev \
          libpng-dev libjpeg-dev

    # Install dependencies on Ubuntu for cross-compiling to Windows
    - name: Install dependencies (Ubuntu - Windows)
      if: matrix.target == 'windows'
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 \
          binutils-mingw-w64-x86-64 \
          gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 \
          libopenal-dev libsdl2-dev libvorbis-dev libogg-dev \
          libjpeg-dev zlib1g-dev

    # Download precompiled Zlib and PNG libraries for Windows cross-compiling
    - name: Download Zlib and PNG libraries
      if: matrix.target == 'windows'
      run: |
        wget -q -O zlib-windows.zip "https://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-bin.zip/download"
        wget -q -O png-windows.zip "https://sourceforge.net/projects/gnuwin32/files/libpng/1.2.37/libpng-1.2.37-bin.zip/download"
        unzip zlib-windows.zip -d ${{ github.workspace }}/external
        unzip png-windows.zip -d ${{ github.workspace }}/external

    # Set reusable strings
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake for native build
    - name: Configure CMake (Ubuntu - Native)
      if: matrix.target == 'native'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DINCLUDE_DIRECTORIES=${{ github.workspace }}/external \
          -S ${{ github.workspace }}

    # Configure CMake for cross-compiling to Windows
    - name: Configure CMake (Ubuntu - Windows)
      if: matrix.target == 'windows'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DINCLUDE_DIRECTORIES="${{ github.workspace }}/external/zlib/include;${{ github.workspace }}/external/png/include" \
          -DLIBRARY_DIRECTORIES="${{ github.workspace }}/external/zlib/lib;${{ github.workspace }}/external/png/lib" \
          -S ${{ github.workspace }}

    # Build
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Test
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
