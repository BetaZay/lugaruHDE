name: CMake build on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        target: [native, windows]
        include:
          - os: ubuntu-latest
            target: native
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            target: windows
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
    
    steps:
    - uses: actions/checkout@v4

    # Install dependencies on Ubuntu for native build
    - name: Install dependencies (Linux - Native)
      if: matrix.target == 'native'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev \
                                libopenal-dev libsdl2-dev libvorbis-dev libogg-dev

    # Install dependencies on Ubuntu for cross-compiling to Windows
    - name: Install dependencies (Linux - Windows)
      if: matrix.target == 'windows'
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 \
                                libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev \
                                libsdl2-dev libvorbis-dev libogg-dev
        # Manually download and set up OpenAL for MinGW
        curl -L https://openal-soft.org/openal-binaries/openal-soft-1.21.1-bin.zip -o openal.zip
        unzip openal.zip -d OpenAL
        export OPENAL_INCLUDE_DIR="${{ github.workspace }}/OpenAL/include"
        export OPENAL_LIBRARY="${{ github.workspace }}/OpenAL/lib/libOpenAL32.dll.a"

    # Set reusable strings
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake for native build
    - name: Configure CMake (Linux - Native)
      if: matrix.target == 'native'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DINCLUDE_DIRECTORIES=${{ github.workspace }}/external \
          -S ${{ github.workspace }}

    # Configure CMake for cross-compiling to Windows
    - name: Configure CMake (Linux - Windows)
      if: matrix.target == 'windows'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DOPENAL_INCLUDE_DIR="${{ OPENAL_INCLUDE_DIR }}" \
          -DOPENAL_LIBRARY="${{ OPENAL_LIBRARY }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DINCLUDE_DIRECTORIES=${{ github.workspace }}/external \
          -S ${{ github.workspace }}

    # Build
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Test
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
